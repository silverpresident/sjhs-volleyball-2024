@inherits StateComponentBase

<div class="match-list">
    <h2>Match Schedule</h2>
    @if (IsLoading)
    {
        <div class="loading">Loading matches...</div>
    }
    else if (ErrorMessage != null)
    {
        <div class="error">@ErrorMessage</div>
    }
    else
    {
        <div class="matches">
            @foreach (var match in AppState.Matches.OrderBy(m => m.ScheduledTime))
            {
                <div class="match-card @GetMatchStatusClass(match)">
                    <div class="match-header">
                        <span class="match-number">Match #@match.MatchNumber</span>
                        <span class="match-round">@match.Round.ToString().Replace("_", " ")</span>
                    </div>
                    <div class="match-time">
                        <i class="fas fa-clock"></i>
                        @FormatDateTime(match.ScheduledTime)
                    </div>
                    <div class="match-location">
                        <i class="fas fa-map-marker-alt"></i>
                        @match.CourtLocation
                    </div>
                    <div class="match-teams">
                        <div class="team home">
                            <span class="team-name">@GetTeamName(match.HomeTeamId)</span>
                            <span class="team-score">@match.HomeTeamScore</span>
                        </div>
                        <div class="vs">VS</div>
                        <div class="team away">
                            <span class="team-name">@GetTeamName(match.AwayTeamId)</span>
                            <span class="team-score">@match.AwayTeamScore</span>
                        </div>
                    </div>
                    <div class="match-status">
                        <span class="status-badge">@GetMatchStatus(match)</span>
                        @if (match.IsDisputed)
                        {
                            <span class="dispute-badge">Under Dispute</span>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(match.RefereeName))
                    {
                        <div class="match-officials">
                            Referee: @match.RefereeName
                            @if (!string.IsNullOrEmpty(match.ScorerName))
                            {
                                <span>| Scorer: @match.ScorerName</span>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private string GetMatchStatusClass(Lib.Models.Match match)
    {
        if (match.IsFinished) return "finished";
        if (match.ActualStartTime.HasValue) return "in-progress";
        return "scheduled";
    }

    protected new string GetMatchStatus(Lib.Models.Match match)
    {
        if (match.IsFinished) return "Finished";
        if (match.ActualStartTime.HasValue) return "In Progress";
        return "Scheduled";
    }

    protected new string GetTeamName(Guid teamId)
    {
        var team = AppState.Teams.FirstOrDefault(t => t.Id == teamId);
        return team?.Name ?? "TBD";
    }

    protected new string FormatDateTime(DateTime dateTime)
    {
        return dateTime.ToString("HH:mm");
    }
}

<style>
.match-list {
    padding: 1rem;
}

.match-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1rem;
    padding: 1rem;
    transition: transform 0.2s;
}

.match-card:hover {
    transform: translateY(-2px);
}

.match-card.scheduled {
    border-left: 4px solid #ffd700;
}

.match-card.in-progress {
    border-left: 4px solid #00ff00;
}

.match-card.finished {
    border-left: 4px solid #808080;
}

.match-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
}

.match-number {
    font-weight: bold;
    color: #666;
}

.match-round {
    color: #888;
}

.match-time, .match-location {
    color: #666;
    margin-bottom: 0.5rem;
}

.match-time i, .match-location i {
    margin-right: 0.5rem;
    width: 16px;
}

.match-teams {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 1rem 0;
}

.team {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.team-name {
    font-weight: bold;
}

.team-score {
    font-size: 1.5rem;
    font-weight: bold;
    color: #333;
}

.vs {
    color: #888;
    font-weight: bold;
}

.match-status {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
}

.status-badge {
    background: #eee;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.875rem;
}

.dispute-badge {
    background: #ff6b6b;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.875rem;
}

.match-officials {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: #666;
}

.loading {
    text-align: center;
    padding: 2rem;
    color: #666;
}

.error {
    color: #ff6b6b;
    padding: 1rem;
    border: 1px solid #ff6b6b;
    border-radius: 4px;
    margin: 1rem 0;
}
</style>
